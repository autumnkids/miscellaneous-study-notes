{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"database/","title":"Database","text":""},{"location":"database/#postgresql","title":"PostgreSQL","text":""},{"location":"database/#specialties","title":"Specialties","text":"<ul> <li>Multi-version concurrency control<ul> <li>i.e. A row of records is versioned into multiple tuples that are representing the same logical row but in different states/versions. The newest version represents the up-to-date record for that row. Different processes can access a record concurrently.</li> </ul> </li> <li>Can define custom type<ul> <li>ProgreSQL allows users to define custome types/objects in a table schema.</li> </ul> </li> </ul>"},{"location":"database/#how-it-works-internally","title":"How It Works Internally","text":"<p>Study notes from presentation by Hussein Nasser.</p>"},{"location":"database/#overview","title":"Overview","text":""},{"location":"database/#post-master-process","title":"Post Master Process","text":"<p>A parent process that starts at the early stage of the application. Exposes the application to port 5432, such that it's ready for connection.</p>"},{"location":"database/#backend-processes","title":"Backend Processes","text":"<p>Each backend process is responsible for maintaining a connection to its consumer.</p> <p>The number of backend process is capped by the parameter <code>max_connections</code>.</p>"},{"location":"database/#background-workers","title":"Background Workers","text":"<p>A background worker is responsible for executing the query or command that a consumer initiated.</p> <p>The number of background workers is capped by the parameter <code>max_worker_processes</code>.</p>"},{"location":"database/#background-writers","title":"Background Writers","text":"<p>A background writer is responsible for flushing the data that is stored in a Page into the filesystem, which will eventually write the data into the disk. It wakes up occasionally to clean up dirty Pages/Shared Memory.</p>"},{"location":"database/#checkpointer","title":"Checkpointer","text":"<p>Checkpointer is responsible for flushing everything - i.e. both WAL records and Pages to the disk, and creating a checkpoint, indicating that everything now is consistent.</p>"},{"location":"database/#logger","title":"Logger","text":"<p>Logger is responsible for writing all the logs into the disk.</p>"},{"location":"database/#autovacuum-launcher-and-workers","title":"Autovacuum Launcher and Workers","text":"<p>Autovacuum worker is responsible for cleaning up the tuples that have older versions and are not being accessed by any of the processes.</p> <p>The number of autovacuum works is capped by the parameter <code>autovacuum_max_workers</code>.</p>"},{"location":"database/#wal-archiver","title":"WAL Archiver","text":"<p>WAL Archiver is responsible for archiving all the WAL records for historical purposes, such that a database can be brought to the newest state from 0 when needed.</p>"},{"location":"database/#wal-reciever","title":"WAL Reciever","text":"<p>WAL Reciever is responsible for recieving WAL records.</p>"},{"location":"database/#wal-writer","title":"WAL Writer","text":"<p>WAL Writer is responsible for flushing the WAL records into the disk. Each time a commit succeeds, WAL records are flushed into the disk.</p>"},{"location":"database/#wal-sender","title":"WAL Sender","text":"<p>A WAL Sender is responsible for sending the WAL records to the replicas, from the master instance.</p> <p>The number of WAL Senders is capped by the parameter <code>max_val_senders</code>.</p>"},{"location":"database/#startup-process","title":"Startup Process","text":"<p>The Startup Process is responsible for checking the state of the database - i.e. it checks whether the data stored in the Pages are up-to-date with what has been recorded in the WAL records. If the Pages are found out of date, the Startup process will try to re-do what has been recorded in the WAL records, in order to load the up-to-date data into the Pages, before the Post Master Process is started.</p>"}]}